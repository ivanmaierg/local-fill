{"version":3,"file":"content.js","sources":["../src/content.ts"],"sourcesContent":["// Content script for Local-Fill extension\n// Handles DOM scanning, autofill execution, and UI overlay\n\nconsole.log('Local-Fill: Content script loaded');\n\n// Initialize content script\nfunction initializeContentScript() {\n  console.log('Local-Fill: Initializing content script');\n  \n  // Set up message listeners\n  setupMessageListeners();\n  \n  // Set up keyboard shortcuts\n  setupKeyboardShortcuts();\n  \n  // Inject overlay UI\n  injectOverlayUI();\n}\n\nfunction setupMessageListeners() {\n  // Listen for messages from background script\n  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    console.log('Local-Fill: Content script received message', message);\n    \n    switch (message.type) {\n      case 'TRIGGER_AUTOFILL':\n        handleTriggerAutofill();\n        break;\n      case 'SHOW_SUGGESTIONS':\n        handleShowSuggestions(message.field);\n        break;\n      default:\n        console.warn('Local-Fill: Unknown message type in content script', message.type);\n    }\n  });\n}\n\nfunction setupKeyboardShortcuts() {\n  document.addEventListener('keydown', (event) => {\n    // Alt+A for autofill (fallback for when command doesn't work)\n    if (event.altKey && event.key === 'a') {\n      event.preventDefault();\n      handleTriggerAutofill();\n    }\n  });\n}\n\nfunction injectOverlayUI() {\n  // Create overlay container\n  const overlay = document.createElement('div');\n  overlay.id = 'local-fill-overlay';\n  overlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 2147483647;\n  `;\n  \n  document.body.appendChild(overlay);\n  \n  // Load overlay script\n  const script = document.createElement('script');\n  script.src = chrome.runtime.getURL('overlay.js');\n  script.type = 'module';\n  document.head.appendChild(script);\n}\n\nasync function handleTriggerAutofill() {\n  console.log('Local-Fill: Triggering autofill');\n  \n  try {\n    // Get active profile from background\n    const response = await chrome.runtime.sendMessage({ type: 'GET_ACTIVE_PROFILE' });\n    \n    if (!response.success || !response.data.activeProfile) {\n      console.warn('Local-Fill: No active profile found');\n      return;\n    }\n    \n    // Scan DOM for form fields\n    const fields = scanFormFields();\n    console.log('Local-Fill: Found fields', fields);\n    \n    // TODO: Implement field mapping and autofill logic\n    // This will be implemented in the core autofill engine\n    \n  } catch (error) {\n    console.error('Local-Fill: Error during autofill', error);\n  }\n}\n\nfunction handleShowSuggestions(field: HTMLElement) {\n  console.log('Local-Fill: Showing suggestions for field', field);\n  \n  // TODO: Implement suggestion popover\n  // This will be implemented in the suggestions system\n}\n\nfunction scanFormFields(): HTMLElement[] {\n  const selectors = [\n    'input[type=\"text\"]',\n    'input[type=\"email\"]',\n    'input[type=\"tel\"]',\n    'input[type=\"url\"]',\n    'textarea',\n    'select'\n  ];\n  \n  const fields: HTMLElement[] = [];\n  \n  selectors.forEach(selector => {\n    const elements = document.querySelectorAll(selector);\n    elements.forEach(element => {\n      if (element instanceof HTMLElement) {\n        fields.push(element);\n      }\n    });\n  });\n  \n  return fields;\n}\n\n// Initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initializeContentScript);\n} else {\n  initializeContentScript();\n}\n"],"names":[],"mappings":"AAGA,QAAQ,IAAI,mCAAmC;AAG/C,SAAS,0BAA0B;AACjC,UAAQ,IAAI,yCAAyC;AAGrD,wBAAA;AAGA,yBAAA;AAGA,kBAAA;AACF;AAEA,SAAS,wBAAwB;AAE/B,SAAO,QAAQ,UAAU,YAAY,CAAC,SAAS,QAAQ,iBAAiB;AACtE,YAAQ,IAAI,+CAA+C,OAAO;AAElE,YAAQ,QAAQ,MAAA;AAAA,MACd,KAAK;AACH,8BAAA;AACA;AAAA,MACF,KAAK;AACH,8BAAsB,QAAQ,KAAK;AACnC;AAAA,MACF;AACE,gBAAQ,KAAK,sDAAsD,QAAQ,IAAI;AAAA,IAAA;AAAA,EAErF,CAAC;AACH;AAEA,SAAS,yBAAyB;AAChC,WAAS,iBAAiB,WAAW,CAAC,UAAU;AAE9C,QAAI,MAAM,UAAU,MAAM,QAAQ,KAAK;AACrC,YAAM,eAAA;AACN,4BAAA;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAEA,SAAS,kBAAkB;AAEzB,QAAM,UAAU,SAAS,cAAc,KAAK;AAC5C,UAAQ,KAAK;AACb,UAAQ,MAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUxB,WAAS,KAAK,YAAY,OAAO;AAGjC,QAAM,SAAS,SAAS,cAAc,QAAQ;AAC9C,SAAO,MAAM,OAAO,QAAQ,OAAO,YAAY;AAC/C,SAAO,OAAO;AACd,WAAS,KAAK,YAAY,MAAM;AAClC;AAEA,eAAe,wBAAwB;AACrC,UAAQ,IAAI,iCAAiC;AAE7C,MAAI;AAEF,UAAM,WAAW,MAAM,OAAO,QAAQ,YAAY,EAAE,MAAM,sBAAsB;AAEhF,QAAI,CAAC,SAAS,WAAW,CAAC,SAAS,KAAK,eAAe;AACrD,cAAQ,KAAK,qCAAqC;AAClD;AAAA,IACF;AAGA,UAAM,SAAS,eAAA;AACf,YAAQ,IAAI,4BAA4B,MAAM;AAAA,EAKhD,SAAS,OAAO;AACd,YAAQ,MAAM,qCAAqC,KAAK;AAAA,EAC1D;AACF;AAEA,SAAS,sBAAsB,OAAoB;AACjD,UAAQ,IAAI,6CAA6C,KAAK;AAIhE;AAEA,SAAS,iBAAgC;AACvC,QAAM,YAAY;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAGF,QAAM,SAAwB,CAAA;AAE9B,YAAU,QAAQ,CAAA,aAAY;AAC5B,UAAM,WAAW,SAAS,iBAAiB,QAAQ;AACnD,aAAS,QAAQ,CAAA,YAAW;AAC1B,UAAI,mBAAmB,aAAa;AAClC,eAAO,KAAK,OAAO;AAAA,MACrB;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,SAAO;AACT;AAGA,IAAI,SAAS,eAAe,WAAW;AACrC,WAAS,iBAAiB,oBAAoB,uBAAuB;AACvE,OAAO;AACL,0BAAA;AACF;"}